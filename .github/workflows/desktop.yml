name: "Create Release Desktop Assets"

on:
  push:
    tags:
      - "desktop-*"
  workflow_dispatch: # 允許手動觸發
    inputs:
      tag_override: # 手動觸發時可選的 tag 輸入
        description: '手動指定一個版本號/tag (例如 desktop-staging-0.1.0)。如果為空，將自動生成一個測試版tag。'
        required: false
        type: string

jobs:
  Build-macos:
    name: Build macOS App (Universal)
    runs-on: macos-latest
    environment: desktop-release
    env:
      APP_NAME: Scone
      # 簽名相關
      MACOS_CERT_BASE64_FROM_SECRET: ${{ secrets.APP_STORE_CONNECT_MACOS_DEVELOPER_ID_CERTIFICATE_BASE64 }}
      MACOS_CERT_PWD_FROM_SECRET: ${{ secrets.APP_STORE_CONNECT_MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
      # 公證相關
      APPLE_ID_SECRET: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD_SECRET: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID_SECRET: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
    outputs:
      full_tag_name: ${{ steps.version_context.outputs.full_tag_name_output }}
      is_staging_build: ${{ steps.version_context.outputs.is_staging_build_output }}
      display_version: ${{ steps.version_context.outputs.display_version_output }}
    steps:
      - name: Determine Version, Staging Context, and Display Version
        id: version_context
        run: |
          TARGET_TAG=""
          IS_STAGING=false
          VERSION_FOR_DISPLAY=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.tag_override }}" ]]; then
              TARGET_TAG="${{ github.event.inputs.tag_override }}"
            else
              TARGET_TAG="desktop-staging-manual-${{ github.run_id }}"
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TARGET_TAG="${{ github.ref_name }}"
          else
            echo "::error ::Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          echo "Processing Tag: $TARGET_TAG"

          if [[ "$TARGET_TAG" == desktop-staging-* ]]; then
            IS_STAGING=true
            VERSION_FOR_DISPLAY="${TARGET_TAG#desktop-}" # e.g., staging-0.1.0-id
          elif [[ "$TARGET_TAG" == desktop-* ]]; then
            IS_STAGING=false
            VERSION_FOR_DISPLAY="${TARGET_TAG#desktop-}" # e.g., 0.1.0
          else
            echo "::warning ::Tag '$TARGET_TAG' does not start with 'desktop-'. This is unexpected."
            IS_STAGING=true
            VERSION_FOR_DISPLAY="$TARGET_TAG"
          fi

          echo "Full Tag Name: $TARGET_TAG"
          echo "Is Staging Build: $IS_STAGING"
          echo "Display Version: $VERSION_FOR_DISPLAY"

          # 設置環境變數 (使用 D_ 前綴)
          echo "D_TAG_VERSION_ENV=${TARGET_TAG}" >> $GITHUB_ENV
          echo "D_IS_STAGING_BUILD_ENV=${IS_STAGING}" >> $GITHUB_ENV
          echo "D_DISPLAY_VERSION_ENV=${VERSION_FOR_DISPLAY}" >> $GITHUB_ENV

          echo "full_tag_name_output=${TARGET_TAG}" >> $GITHUB_OUTPUT
          echo "is_staging_build_output=${IS_STAGING}" >> $GITHUB_OUTPUT
          echo "display_version_output=${VERSION_FOR_DISPLAY}" >> $GITHUB_OUTPUT

      - name: fetch repo source
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          ref: ${{ env.D_IS_STAGING_BUILD_ENV == 'true' && 'staging' || 'master' }}


      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Dependencies using pnpm
        run: pnpm install --frozen-lockfile

      - name: Create .env file for vite build
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Import Certificate and Set Signing Identity
        id: import_and_set_identity
        if: env.MACOS_CERT_BASE64_FROM_SECRET != '' && env.MACOS_CERT_PWD_FROM_SECRET != ''
        env:
          KEYCHAIN_TEMP_PASSWORD: "temp_ci_keychain_pwd"
        run: |
          echo "Importing Apple Developer ID Certificate..."
          echo "${{ env.MACOS_CERT_BASE64_FROM_SECRET }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ env.MACOS_CERT_PWD_FROM_SECRET }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          rm certificate.p12

          echo "Verifying certificate and extracting signing identity..."
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -n 1)
          if [ -z "$CERT_INFO" ]; then
            echo "::error ::Developer ID Application certificate not found in keychain."
            security find-identity -v -p codesigning build.keychain
            exit 1
          fi
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "Found signing identity: $CERT_ID"
          echo "apple_signing_identity_output=$CERT_ID" >> $GITHUB_OUTPUT
          echo "Certificate imported and identity set successfully."

      - name: Setup Rust Environment
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Add Rust targets for Universal macOS build
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Build macOS Universal App
        run: pnpm build:mac
        env:
          # 如果是 staging build，VITE_ENV 為 staging，否則為 production
          VITE_ENV: ${{ env.D_IS_STAGING_BUILD_ENV == 'true' && 'staging' || 'production' }}
          APPLE_SIGNING_IDENTITY: ${{ steps.import_and_set_identity.outputs.apple_signing_identity_output }}
          APPLE_ID: ${{ env.APPLE_ID_SECRET }}
          APPLE_PASSWORD: ${{ env.APPLE_PASSWORD_SECRET }}
          APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID_SECRET }}

      - name: Package macOS Artifacts
        run: |
          CONFIG_APP_NAME_RAW=$(jq -r '.package.productName // .package.name // env.APP_NAME' src-tauri/tauri.conf.json)
          SANITIZED_APP_NAME=$(echo "$CONFIG_APP_NAME_RAW" | sed 's/ /-/g')
          APP_DIR="src-tauri/target/universal-apple-darwin/release/bundle/macos/${SANITIZED_APP_NAME}.app"
          DMG_FILE_PATTERN="src-tauri/target/universal-apple-darwin/release/bundle/dmg/${SANITIZED_APP_NAME}_*universal.dmg"
          DMG_FILE_FOUND=$(ls $DMG_FILE_PATTERN | head -n 1)

          APP_ARCHIVE="${SANITIZED_APP_NAME}_${{ env.D_DISPLAY_VERSION_ENV }}_universal.app.tar.gz"
          FINAL_DMG_NAME="${SANITIZED_APP_NAME}_${{ env.D_DISPLAY_VERSION_ENV }}_universal.dmg"

          echo "Archiving $APP_DIR to $APP_ARCHIVE"
          tar czf $APP_ARCHIVE -C "$(dirname "$APP_DIR")" "$(basename "$APP_DIR")"
          echo "Moving $DMG_FILE_FOUND to $FINAL_DMG_NAME"
          mv "$DMG_FILE_FOUND" "$FINAL_DMG_NAME"

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            # *.app.tar.gz
            *.dmg

  Build-windows:
    name: Build Windows App (x64)
    runs-on: windows-latest
    environment: desktop-release
    env:
      APP_NAME: Scone
    outputs:
      full_tag_name_output: ${{ steps.version_context.outputs.full_tag_name_output }}
      is_staging_build_output: ${{ steps.version_context.outputs.is_staging_build_output }}
      display_version_output: ${{ steps.version_context.outputs.display_version_output }}
    steps:
      - name: Determine Version and Staging Context
        id: version_context
        shell: pwsh # 使用 PowerShell
        run: |
          $TARGET_TAG = ""
          $IS_STAGING = $false
          $VERSION_FOR_DISPLAY = ""

          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            if (-not [string]::IsNullOrEmpty("${{ github.event.inputs.tag_override }}")) {
              $TARGET_TAG = "${{ github.event.inputs.tag_override }}"
            } else {
              $TARGET_TAG = "desktop-staging-manual-${{ github.run_id }}"
            }
          } elseif ("${{ github.event_name }}" -eq "push") {
            $TARGET_TAG = "${{ github.ref_name }}"
          } else {
            Write-Error "Unsupported event: ${{ github.event_name }}"
            exit 1
          }

          Write-Host "Processing Tag (Windows): $TARGET_TAG"
          if ($TARGET_TAG -like "desktop-staging-*") {
            $IS_STAGING = $true
            $VERSION_FOR_DISPLAY = $TARGET_TAG.Substring("desktop-".Length)
          } elseif ($TARGET_TAG -like "desktop-*") {
            $IS_STAGING = $false
            $VERSION_FOR_DISPLAY = $TARGET_TAG.Substring("desktop-".Length)
          } else {
            Write-Warning "Tag '$TARGET_TAG' does not start with 'desktop-'. This is unexpected."
            $IS_STAGING = $true
            $VERSION_FOR_DISPLAY = $TARGET_TAG
          }

          Write-Host "Full Tag Name (Windows): $TARGET_TAG"
          Write-Host "Is Staging Build (Windows): $IS_STAGING"
          Write-Host "Display Version (Windows): $VERSION_FOR_DISPLAY"

          # 設置環境變數 (使用 D_ 前綴)
          "D_TAG_VERSION_ENV=$TARGET_TAG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "D_IS_STAGING_BUILD_ENV=$IS_STAGING" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "D_DISPLAY_VERSION_ENV=$VERSION_FOR_DISPLAY" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "full_tag_name_output=$TARGET_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "is_staging_build_output=$IS_STAGING" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "display_version_output=$VERSION_FOR_DISPLAY" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: fetch repo source
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          ref: ${{ env.D_IS_STAGING_BUILD_ENV == 'True' && 'staging' || 'master' }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Dependencies using pnpm
        run: pnpm install --frozen-lockfile

      - name: Create .env file for vite build
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Setup Rust Environment
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Build Windows App
        run: pnpm build:windows
        env:
          VITE_ENV: ${{ env.D_IS_STAGING_BUILD_ENV == 'True' && 'staging' || 'production' }}

      - name: Locate Windows Artifact
        id: locate_msi
        run: |
          $configAppNameRaw = (Get-Content -Raw -Path src-tauri/tauri.conf.json | ConvertFrom-Json).package.productName
          if (-not $configAppNameRaw) { $configAppNameRaw = (Get-Content -Raw -Path src-tauri/tauri.conf.json | ConvertFrom-Json).package.name }
          if (-not $configAppNameRaw) { $configAppNameRaw = "${{ env.APP_NAME }}" }
          $sanitizedAppName = $configAppNameRaw -replace ' ', '-'
          $msiSearchPattern = "src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${sanitizedAppName}_*x64_en-US.msi"
          $msiPath = Get-ChildItem -Path $msiSearchPattern | Select-Object -First 1 -ExpandProperty FullName
          if (-not $msiPath) { Write-Error "MSI file not found with pattern: $msiSearchPattern."; exit 1 }
          $msiName = "${sanitizedAppName}_${{ env.D_DISPLAY_VERSION_ENV }}_x64.msi"
          Copy-Item -Path $msiPath -Destination $msiName
          "msi_name=$msiName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ steps.locate_msi.outputs.msi_name }}

  create-release:
    name: Create GitHub Release
    needs: [Build-macos, Build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CR_FULL_TAG: ${{ needs.Build-macos.outputs.full_tag_name }}
      CR_IS_STAGING: ${{ needs.Build-macos.outputs.is_staging_build }}
      CR_DISPLAY_VERSION_FOR_ARTIFACT_AND_CHANGELOG_REF: ${{ needs.Build-macos.outputs.display_version }}
    steps:
      - name: Determine Release Name and Prerelease Flag
        id: release_info
        run: |
          FINAL_RELEASE_NAME=""
          MARK_AS_PRERELEASE=false
          RELEASE_TITLE_VERSION=""

          CR_FULL_TAG_SHELL="${{ env.CR_FULL_TAG }}"
          CR_IS_STAGING_SHELL="${{ env.CR_IS_STAGING }}"

          if [[ "$CR_IS_STAGING_SHELL" == "true" ]]; then
            MARK_AS_PRERELEASE=true
            if [[ "$CR_FULL_TAG_SHELL" == desktop-staging-* ]]; then
              TEMP_VERSION_PART="${CR_FULL_TAG_SHELL#desktop-staging-}"
              RELEASE_TITLE_VERSION=$(echo "$TEMP_VERSION_PART" | cut -d'-' -f1)
            else
              RELEASE_TITLE_VERSION="${{ env.CR_DISPLAY_VERSION_FOR_ARTIFACT_AND_CHANGELOG_REF }}"
              if [[ "$RELEASE_TITLE_VERSION" == staging-* ]]; then
                RELEASE_TITLE_VERSION="${RELEASE_TITLE_VERSION#staging-}"
              fi
            fi
            FINAL_RELEASE_NAME="Desktop-Test $RELEASE_TITLE_VERSION"
          else
            # 正式版
            RELEASE_TITLE_VERSION="${{ env.CR_DISPLAY_VERSION_FOR_ARTIFACT_AND_CHANGELOG_REF }}"
            FINAL_RELEASE_NAME="Desktop $RELEASE_TITLE_VERSION"
          fi

          echo "Release Name: $FINAL_RELEASE_NAME"
          echo "Is Prerelease: $MARK_AS_PRERELEASE"
          echo "release_name_output=${FINAL_RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "prerelease_output=${MARK_AS_PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Checkout full history for changelog generation
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ env.CR_IS_STAGING == 'true' && 'staging' || env.CR_DISPLAY_VERSION }}

      - name: Setup Node.js for changelog
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install and Generate Changelog from Yvictor/scone history
        run: |
          npm install -g conventional-changelog-cli
          TARGET_REF_INFO="${{ env.CR_IS_STAGING == 'true' && 'staging branch HEAD' || env.CR_DISPLAY_VERSION }}"
          echo "Attempting to generate changelog from Yvictor/scone for ref: $TARGET_REF_INFO (public tag: ${{ env.CR_FULL_TAG }})"
          conventional-changelog -p conventionalcommits -r 1 --commit-path . > RELEASE_NOTES_DESKTOP.md || echo "Changelog generation for $TARGET_REF_INFO might have issues or be empty."
          echo "--- Generated Desktop Release Notes (from Yvictor/scone history) ---"
          cat RELEASE_NOTES_DESKTOP.md
          echo "--------------------------------------------------------------------"

      - name: Create/Update GitHub Release on Sinotrade/scone
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.CR_FULL_TAG }}
          name: ${{ steps.release_info.outputs.release_name_output }}
          body_path: RELEASE_NOTES_DESKTOP.md
          prerelease: ${{ steps.release_info.outputs.prerelease_output }}
          files: |
            artifacts/macos-build/*
            artifacts/windows-build/*
