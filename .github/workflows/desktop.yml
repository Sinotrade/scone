name: "Create Release Desktop Assets"

on:
  push:
    tags:
      - "desktop-*"
  workflow_dispatch: # 允許手動觸發
    inputs:
      tag_override: # 手動觸發時可選的 tag 輸入
        description: '手動指定一個版本號/tag (例如 desktop-staging-0.1.0)。如果為空，將自動生成一個測試版tag。'
        required: false
        type: string

jobs:
  Build-macos:
    name: Build macOS App (Universal)
    runs-on: macos-latest
    environment: desktop-release
    env:
      APP_NAME: Scone
      # 簽名相關
      MACOS_CERT_BASE64_FROM_SECRET: ${{ secrets.APP_STORE_CONNECT_MACOS_DEVELOPER_ID_CERTIFICATE_BASE64 }}
      MACOS_CERT_PWD_FROM_SECRET: ${{ secrets.APP_STORE_CONNECT_MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
      # 公證相關
      APPLE_ID_SECRET: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD_SECRET: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID_SECRET: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
    outputs:
      full_tag_name: ${{ steps.version_context.outputs.full_tag_name_output }}
      is_staging_build: ${{ steps.version_context.outputs.is_staging_build_output }}
      display_version: ${{ steps.version_context.outputs.display_version_output }}
    steps:
      - name: Determine Version, Staging Context, and Display Version
        id: version_context
        run: |
          TARGET_TAG=""
          IS_STAGING=false
          VERSION_FOR_DISPLAY=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.tag_override }}" ]]; then
              TARGET_TAG="${{ github.event.inputs.tag_override }}"
            else
              TARGET_TAG="desktop-staging-manual-${{ github.run_id }}"
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TARGET_TAG="${{ github.ref_name }}"
          else
            echo "::error ::Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          echo "Processing Tag: $TARGET_TAG"

          if [[ "$TARGET_TAG" == desktop-staging-* ]]; then
            IS_STAGING=true
            VERSION_FOR_DISPLAY="${TARGET_TAG#desktop-}" # e.g., staging-0.1.0-id
          elif [[ "$TARGET_TAG" == desktop-* ]]; then
            IS_STAGING=false
            VERSION_FOR_DISPLAY="${TARGET_TAG#desktop-}" # e.g., 0.1.0
          else
            echo "::warning ::Tag '$TARGET_TAG' does not start with 'desktop-'. This is unexpected."
            IS_STAGING=true
            VERSION_FOR_DISPLAY="$TARGET_TAG"
          fi

          echo "Full Tag Name: $TARGET_TAG"
          echo "Is Staging Build: $IS_STAGING"
          echo "Display Version: $VERSION_FOR_DISPLAY"

          # 設置環境變數 (使用 D_ 前綴)
          echo "D_TAG_VERSION_ENV=${TARGET_TAG}" >> $GITHUB_ENV
          echo "D_IS_STAGING_BUILD_ENV=${IS_STAGING}" >> $GITHUB_ENV
          echo "D_DISPLAY_VERSION_ENV=${VERSION_FOR_DISPLAY}" >> $GITHUB_ENV

          echo "full_tag_name_output=${TARGET_TAG}" >> $GITHUB_OUTPUT
          echo "is_staging_build_output=${IS_STAGING}" >> $GITHUB_OUTPUT
          echo "display_version_output=${VERSION_FOR_DISPLAY}" >> $GITHUB_OUTPUT

      - name: fetch repo source
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          ref: ${{ env.D_IS_STAGING_BUILD_ENV == 'true' && 'staging' || 'master' }}


      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Dependencies using pnpm
        run: pnpm install --frozen-lockfile

      - name: Create .env file for vite build
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Import Certificate and Set Signing Identity
        id: import_and_set_identity
        if: env.MACOS_CERT_BASE64_FROM_SECRET != '' && env.MACOS_CERT_PWD_FROM_SECRET != ''
        env:
          KEYCHAIN_TEMP_PASSWORD: "temp_ci_keychain_pwd"
        run: |
          echo "Importing Apple Developer ID Certificate..."
          echo "${{ env.MACOS_CERT_BASE64_FROM_SECRET }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ env.MACOS_CERT_PWD_FROM_SECRET }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ env.KEYCHAIN_TEMP_PASSWORD }}" build.keychain
          rm certificate.p12

          echo "Verifying certificate and extracting signing identity..."
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -n 1)
          if [ -z "$CERT_INFO" ]; then
            echo "::error ::Developer ID Application certificate not found in keychain."
            security find-identity -v -p codesigning build.keychain
            exit 1
          fi
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "Found signing identity: $CERT_ID"
          echo "apple_signing_identity_output=$CERT_ID" >> $GITHUB_OUTPUT
          echo "Certificate imported and identity set successfully."

      - name: Setup Rust Environment
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Add Rust targets for Universal macOS build
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Build macOS Universal App
        run: pnpm build:mac
        env:
          # 如果是 staging build，VITE_ENV 為 staging，否則為 production
          VITE_ENV: ${{ env.D_IS_STAGING_BUILD_ENV == 'true' && 'staging' || 'production' }}
          APPLE_SIGNING_IDENTITY: ${{ steps.import_and_set_identity.outputs.apple_signing_identity_output }}
          APPLE_ID: ${{ env.APPLE_ID_SECRET }}
          APPLE_PASSWORD: ${{ env.APPLE_PASSWORD_SECRET }}
          APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID_SECRET }}

      - name: Package macOS Artifacts
        id: package_macos # MODIFIED: Added id for output referencing
        run: |
          CONFIG_APP_NAME_RAW=$(jq -r '.package.productName // .package.name // env.APP_NAME' src-tauri/tauri.conf.json)
          SANITIZED_APP_NAME=$(echo "$CONFIG_APP_NAME_RAW" | sed 's/ /-/g')

          echo "DEBUG: SANITIZED_APP_NAME='${SANITIZED_APP_NAME}'"
          echo "DEBUG: D_DISPLAY_VERSION_ENV='${{ env.D_DISPLAY_VERSION_ENV }}'"

          APP_DIR_NAME="${SANITIZED_APP_NAME}.app"
          APP_DIR_PATH="src-tauri/target/universal-apple-darwin/release/bundle/macos/${APP_DIR_NAME}"

          # List files in bundle directory for debugging
          echo "DEBUG: Listing contents of src-tauri/target/universal-apple-darwin/release/bundle/macos/"
          ls -l "src-tauri/target/universal-apple-darwin/release/bundle/macos/"
          echo "DEBUG: Listing contents of src-tauri/target/universal-apple-darwin/release/bundle/dmg/"
          ls -l "src-tauri/target/universal-apple-darwin/release/bundle/dmg/"

          DMG_FILE_PATTERN="src-tauri/target/universal-apple-darwin/release/bundle/dmg/${SANITIZED_APP_NAME}_*universal.dmg"
          DMG_FILE_FOUND=$(ls $DMG_FILE_PATTERN 2>/dev/null | head -n 1) # Added 2>/dev/null to suppress ls error if no match

          if [ -z "$DMG_FILE_FOUND" ]; then
            echo "::error ::DMG file matching pattern '$DMG_FILE_PATTERN' not found."
            exit 1
          fi
          if [ ! -d "$APP_DIR_PATH" ]; then # Check app directory specifically
            echo "::error ::App directory '$APP_DIR_PATH' not found."
            exit 1
          fi

          APP_ARCHIVE_BASENAME="${SANITIZED_APP_NAME}_${{ env.D_DISPLAY_VERSION_ENV }}_universal.app.tar.gz"
          FINAL_DMG_BASENAME="${SANITIZED_APP_NAME}_${{ env.D_DISPLAY_VERSION_ENV }}_universal.dmg"

          echo "Archiving $APP_DIR_PATH to $APP_ARCHIVE_BASENAME"
          tar czf "$APP_ARCHIVE_BASENAME" -C "$(dirname "$APP_DIR_PATH")" "$(basename "$APP_DIR_PATH")"

          echo "Moving $DMG_FILE_FOUND to $FINAL_DMG_BASENAME"
          mv "$DMG_FILE_FOUND" "$FINAL_DMG_BASENAME"

          echo "DEBUG: Workspace files after packaging:"
          ls -l

          echo "app_archive_output=${APP_ARCHIVE_BASENAME}" >> $GITHUB_OUTPUT
          echo "dmg_name_output=${FINAL_DMG_BASENAME}" >> $GITHUB_OUTPUT

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            ${{ steps.package_macos.outputs.dmg_name_output }}

  Build-windows:
    name: Build Windows App (x64)
    runs-on: windows-latest
    environment: desktop-release
    env:
      APP_NAME: Scone
    outputs:
      full_tag_name_output: ${{ steps.version_context.outputs.full_tag_name_output }}
      is_staging_build_output: ${{ steps.version_context.outputs.is_staging_build_output }}
      display_version_output: ${{ steps.version_context.outputs.display_version_output }}
    steps:
      - name: Determine Version and Staging Context
        id: version_context
        shell: pwsh
        run: |
          $TARGET_TAG = ""
          $IS_STAGING = $false
          $VERSION_FOR_DISPLAY = ""

          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            if (-not [string]::IsNullOrEmpty("${{ github.event.inputs.tag_override }}")) {
              $TARGET_TAG = "${{ github.event.inputs.tag_override }}"
            } else {
              $TARGET_TAG = "desktop-staging-manual-${{ github.run_id }}"
            }
          } elseif ("${{ github.event_name }}" -eq "push") {
            $TARGET_TAG = "${{ github.ref_name }}"
          } else {
            Write-Error "Unsupported event: ${{ github.event_name }}"
            exit 1
          }

          Write-Host "Processing Tag (Windows): $TARGET_TAG"
          if ($TARGET_TAG -like "desktop-staging-*") {
            $IS_STAGING = $true
            $VERSION_FOR_DISPLAY = $TARGET_TAG.Substring("desktop-".Length)
          } elseif ($TARGET_TAG -like "desktop-*") {
            $IS_STAGING = $false
            $VERSION_FOR_DISPLAY = $TARGET_TAG.Substring("desktop-".Length)
          } else {
            Write-Warning "Tag '$TARGET_TAG' does not start with 'desktop-'. This is unexpected."
            $IS_STAGING = $true # Defaulting to staging for unexpected tags might need review
            $VERSION_FOR_DISPLAY = $TARGET_TAG
          }

          Write-Host "Full Tag Name (Windows): $TARGET_TAG"
          Write-Host "Is Staging Build (Windows): $IS_STAGING"
          Write-Host "Display Version (Windows): $VERSION_FOR_DISPLAY"

          # 設置環境變數 (使用 D_ 前綴)
          "D_TAG_VERSION_ENV=$TARGET_TAG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # PowerShell boolean to string is 'True' or 'False', ensure this is handled consistently if read by bash
          "D_IS_STAGING_BUILD_ENV=$($IS_STAGING.ToString().ToLower())" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "D_DISPLAY_VERSION_ENV=$VERSION_FOR_DISPLAY" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          "full_tag_name_output=$TARGET_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "is_staging_build_output=$($IS_STAGING.ToString().ToLower())" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "display_version_output=$VERSION_FOR_DISPLAY" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: fetch repo source
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          ref: ${{ env.D_IS_STAGING_BUILD_ENV == 'True' && 'staging' || 'master' }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Dependencies using pnpm
        run: pnpm install --frozen-lockfile

      - name: Create .env file for vite build
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Setup Rust Environment
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Build Windows App
        run: pnpm build:windows
        env:
          VITE_ENV: ${{ env.D_IS_STAGING_BUILD_ENV == 'True' && 'staging' || 'production' }}

      - name: Locate Windows Artifact
        id: locate_msi
        shell: pwsh
        run: |
          $configAppNameRaw = (Get-Content -Raw -Path src-tauri/tauri.conf.json | ConvertFrom-Json).package.productName
          if (-not $configAppNameRaw) { $configAppNameRaw = (Get-Content -Raw -Path src-tauri/tauri.conf.json | ConvertFrom-Json).package.name }
          if (-not $configAppNameRaw) { $configAppNameRaw = "${{ env.APP_NAME }}" }
          $sanitizedAppName = $configAppNameRaw -replace ' ', '-'

          Write-Host "DEBUG: SANITIZED_APP_NAME='${sanitizedAppName}'"
          Write-Host "DEBUG: D_DISPLAY_VERSION_ENV='${{ env.D_DISPLAY_VERSION_ENV }}'"

          $msiSearchPattern = "src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${sanitizedAppName}_*x64_en-US.msi"
          Write-Host "DEBUG: MSI Search Pattern: $msiSearchPattern"

          # List files in the MSI bundle directory for debugging
          Write-Host "DEBUG: Listing contents of src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/"
          Get-ChildItem -Path "src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/" -ErrorAction SilentlyContinue

          $msiPath = Get-ChildItem -Path $msiSearchPattern | Select-Object -First 1 -ExpandProperty FullName
          if (-not $msiPath) { Write-Error "MSI file not found with pattern: $msiSearchPattern."; exit 1 }

          $msiName = "${sanitizedAppName}_${{ env.D_DISPLAY_VERSION_ENV }}_x64.msi"
          Write-Host "Original MSI Path: $msiPath"
          Write-Host "Target MSI Name for upload: $msiName"

          Copy-Item -Path $msiPath -Destination $msiName -Force
          if (-not (Test-Path $msiName)) { Write-Error "Failed to copy MSI to $msiName"; exit 1}

          Write-Host "DEBUG: Workspace files after packaging:"
          Get-ChildItem . | Select-Object Name, Length

          "msi_name=$msiName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ steps.locate_msi.outputs.msi_name }}

  create-release:
    name: Create GitHub Release
    needs: [Build-macos, Build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CR_FULL_TAG: ${{ needs.Build-macos.outputs.full_tag_name }}
      CR_IS_STAGING: ${{ needs.Build-macos.outputs.is_staging_build }}
      CR_DISPLAY_VERSION: ${{ needs.Build-macos.outputs.display_version }}
    steps:
      - name: Determine Release Name and Prerelease Flag
        id: release_info
        run: |
          FINAL_RELEASE_NAME=""
          MARK_AS_PRERELEASE=false
          CANONICAL_TAG_FOR_RELEASE=""

          CR_IS_STAGING_SHELL="${{ env.CR_IS_STAGING }}"
          CR_DISPLAY_VERSION_SHELL="${{ env.CR_DISPLAY_VERSION }}"
          CR_FULL_TAG_SHELL="${{ env.CR_FULL_TAG }}"

          echo "DEBUG Input: CR_IS_STAGING_SHELL='${CR_IS_STAGING_SHELL}'"
          echo "DEBUG Input: CR_DISPLAY_VERSION_SHELL='${CR_DISPLAY_VERSION_SHELL}'"
          echo "DEBUG Input: CR_FULL_TAG_SHELL='${CR_FULL_TAG_SHELL}'"

          if [[ "$CR_IS_STAGING_SHELL" == "true" ]]; then
            # 測試版
            MARK_AS_PRERELEASE=true
            VERSION_PART_AFTER_STAGING_PREFIX="${CR_DISPLAY_VERSION_SHELL#staging-}"
            BASE_VERSION_FOR_TITLE=$(echo "$VERSION_PART_AFTER_STAGING_PREFIX" | cut -d'-' -f1)

            if [[ -z "$BASE_VERSION_FOR_TITLE" ]]; then
              echo "::error ::Could not determine base version for staging from CR_DISPLAY_VERSION_SHELL: ${CR_DISPLAY_VERSION_SHELL}"
              exit 1
            fi

            FINAL_RELEASE_NAME="Desktop-Test $BASE_VERSION_FOR_TITLE"
            CANONICAL_TAG_FOR_RELEASE="desktop-staging-v${BASE_VERSION_FOR_TITLE}"
          else
            # 正式版
            MARK_AS_PRERELEASE=false # Explicitly false for production
            FINAL_RELEASE_NAME="Desktop $CR_DISPLAY_VERSION_SHELL"
            CANONICAL_TAG_FOR_RELEASE="$CR_FULL_TAG_SHELL"
          fi

          echo "Final Release Name: $FINAL_RELEASE_NAME"
          echo "Is Prerelease: $MARK_AS_PRERELEASE"
          echo "Canonical Tag for Release: $CANONICAL_TAG_FOR_RELEASE"

          echo "release_name_output=${FINAL_RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "prerelease_output=${MARK_AS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "canonical_tag_output=${CANONICAL_TAG_FOR_RELEASE}" >> $GITHUB_OUTPUT

      - name: Checkout Yvictor/scone for changelog generation
        uses: actions/checkout@v4
        with:
          repository: "Yvictor/scone"
          token: ${{ secrets.SCONE_GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ env.CR_IS_STAGING == 'true' && 'staging' || steps.release_info.outputs.canonical_tag_output }}
          path: 'changelog_repo'

      - name: Setup Node.js for changelog
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install and Generate Changelog from Yvictor/scone history
        working-directory: changelog_repo
        run: |
          npm install -g conventional-changelog-cli
          echo "Attempting to generate changelog from Yvictor/scone (path: $(pwd)) for ref being processed by conventional-changelog (typically latest tags)"
          conventional-changelog -p conventionalcommits -r 1 --commit-path . > ../RELEASE_NOTES_DESKTOP.md || echo "Changelog generation for specified ref might have issues or be empty."

          echo "--- Generated Desktop Release Notes (from Yvictor/scone history) ---"
          cat ../RELEASE_NOTES_DESKTOP.md
          echo "--------------------------------------------------------------------"

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts in $(pwd)/artifacts/ :"
          ls -lR artifacts/
          echo "--- macOS Build (expected in artifacts/macos-build/): ---"
          ls -l artifacts/macos-build/
          echo "--- Windows Build (expected in artifacts/windows-build/): ---"
          ls -l artifacts/windows-build/
          echo "--- Release Notes file in workspace root: ---"
          ls -l ${{ github.workspace }}/RELEASE_NOTES_DESKTOP.md

      - name: Clean up old DMG/MSI assets from Staging Release
        if: steps.release_info.outputs.prerelease_output == 'true' # Only run for staging/prerelease
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.release_info.outputs.canonical_tag_output }}
        run: |
          echo "Attempting to clean up .dmg and .msi assets for release tag: $RELEASE_TAG"

          if ! gh release view "$RELEASE_TAG" --json id --jq .id > /dev/null 2>&1 ; then
            echo "Release $RELEASE_TAG does not exist yet. No assets to clean up."
            exit 0 # Successfully exit, as there's nothing to clean
          fi

          echo "Fetching existing .dmg and .msi assets for release $RELEASE_TAG..."

          ASSET_LIST_FILE=$(mktemp)
          gh release view "$RELEASE_TAG" --json assets --jq '.assets[] | select(.name | test("(?i)\\.(dmg|msi)$")) | .name' > "$ASSET_LIST_FILE"

          if [ ! -s "$ASSET_LIST_FILE" ]; then # Check if file is empty (no assets found)
            echo "No .dmg or .msi assets found to delete for release $RELEASE_TAG."
          else
            echo "Found assets to delete:"
            cat "$ASSET_LIST_FILE"

            while IFS= read -r ASSET_NAME; do
              if [ -n "$ASSET_NAME" ]; then # Ensure ASSET_NAME is not empty
                echo "Deleting asset: '$ASSET_NAME' from release $RELEASE_TAG..."
                gh release delete-asset "$RELEASE_TAG" "$ASSET_NAME" --repo "$GITHUB_REPOSITORY" -y
                if [ $? -eq 0 ]; then
                  echo "Successfully deleted '$ASSET_NAME'."
                else
                  echo "::warning ::Failed to delete asset '$ASSET_NAME' or it was already removed."
                fi
              fi
            done < "$ASSET_LIST_FILE"
            echo "Finished cleaning up old .dmg and .msi assets."
          fi
          rm "$ASSET_LIST_FILE"

      - name: Create/Update GitHub Release on Sinotrade/scone
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.release_info.outputs.canonical_tag_output }}
          name: ${{ steps.release_info.outputs.release_name_output }}
          body_path: RELEASE_NOTES_DESKTOP.md
          prerelease: ${{ steps.release_info.outputs.prerelease_output }}
          files: |
            artifacts/macos-build/*
            artifacts/windows-build/*
